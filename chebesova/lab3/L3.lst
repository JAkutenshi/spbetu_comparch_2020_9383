Microsoft (R) Macro Assembler Version 5.10                  11/4/20 13:08:13
                                                             Page     1-1


       1 0000				DATA SEGMENT
       2 0000  0001			a       DW      1
       3 0002  0002			b       DW      2
       4 0004  0004			i       DW      4
       5 0006  0000			k       DW      0
       6 0008  0000			i1      DW      ?
       7 000A  0000			i2      DW      ?
       8 000C  0000			res     DW		?
       9 000E				DATA ENDS
      10				
      11 0000				AStack SEGMENT STACK
      12 0000  0010[			    DW 16 DUP(?)
      13	   ????			
      14			 ]	
      15				
      16 0020				AStack ENDS
      17				
      18 0000				CODE SEGMENT
      19				    ASSUME CS:CODE, SS:AStack, DS:DATA
      20 0000				Main PROC FAR
      21 0000  B8 ---- R		    mov ax, DATA
      22 0003  8E D8			    mov ds, ax
      23					
      24 0005				f1:
      25 0005  A1 0000 R		    mov ax, a
      26 0008  3B 06 0002 R		    cmp ax, b ;Сравнение а и б
      27 000C  7E 16			    jle f1_second ;a <= b
      28					
      29 000E  A1 0004 R		    mov ax, i ;
      30 0011  D1 E0				shl ax, 1 ;   ;2i
      31 0013  03 06 0004 R			add ax, i ;   ;3i
      32 0017  D1 E0				shl ax, 1 ;   ;6i
      33				    ;shl ax, 1 ; ;2i
      34					;mov bx, ax ; ;2i
      35					;shl ax, 1 ;  ;4i
      36					;add ax, bx ; ;4i+2i=6i
      37 0019  2D 0004				sub ax, 4 ;  ;6i-4
      38 001C  F7 D8				neg ax ;     ;-(6i-4)
      39 001E  A3 0008 R			mov i1, ax ;
      40					
      41 0021  EB 27 90			    jmp f2
      42					
      43 0024				f1_second: ;jump сюда если а <= b
      44 0024  A1 0004 R		    mov ax, i ;
      45 0027  05 0002				add ax, 2 ;
      46 002A  8B D8				mov bx, ax ;   ;bx=i+2
      47 002C  D1 E0				shl ax, 1 ;    ;2*(i+2)
      48 002E  03 C3				add ax, bx ;   ;3*(i+2)
      49 0030  A3 0008 R		    mov i1, ax ;   ;Помещаем в i1 значе
					ние из ax
      50				
      51 0033				f2_second:         ;если a <= b
      52 0033  A1 0004 R		    mov ax, i;
      53 0036  2D 0001				sub ax, 1;
Microsoft (R) Macro Assembler Version 5.10                  11/4/20 13:08:13
                                                             Page     1-2


      54 0039  8B D8				mov bx, ax ;   ;bx=i-1
      55 003B  D1 E0				shl ax, 1 ;    ;2*(i-1)
      56 003D  03 C3				add ax, bx ;   ;3*(i-1)
      57 003F  F7 D8				neg ax ;       ;-3*(i-1)
      58 0041  05 0009				add ax, 9 ;    ;9-3*(i-1)
      59 0044  A3 000A R		    mov i2, ax ;   ;Помещаем в i2 значе
					ние из ax
      60				
      61 0047  EB 14 90			    jmp f3
      62					
      63 004A				f2:                ;jump сюда если a > 
					b
      64 004A  A1 0004 R		    mov ax, i;
      65 004D  D1 E0				shl ax, 1 ;   ;2i
      66 004F  03 06 0004 R			add ax, i ;   ;3i
      67 0053  D1 E0				shl ax, 1 ;   ;6i
      68 0055  05 0008				add ax, 8 ;   ;6i+8
      69 0058  F7 D8				neg ax ;      ;-(6i+8)
      70 005A  A3 000A R		    mov i2, ax ;Помещаем в i2 значение 
					из ax
      71					
      72					
      73 005D				f3:
      74 005D  A1 0006 R		    mov ax, k
      75 0060  3D 0000			    cmp ax, 0
      76 0063  74 18				je f3_second ;k = 0
      77					
      78 0065  A1 0008 R			mov ax, i1 ; 
      79 0068  8B 1E 000A R			mov bx, i2 ;
      80 006C  3B C3				cmp ax, bx ;
      81 006E  7D 06				jge min_i2 ;   ;i1 >=i2
      82 0070  A3 000C R			mov res, ax ;
      83					
      84 0073  EB 1F 90				jmp f_end
      85					
      86 0076				min_i2:
      87 0076  89 1E 000C R			mov res, bx ;
      88 007A  EB 18 90				jmp f_end
      89				
      90				
      91 007D				f3_second:
      92 007D  A1 0008 R			mov ax, i1 ;
      93 0080  03 06 000A R			add ax, i2 ;
      94 0084  3D 0000				cmp ax, 0 ;
      95 0087  7E 06				jle abs_neg ;   ;i1+i2 <= 0
      96 0089  A3 000C R			mov res, ax ;
      97					
      98 008C  EB 06 90				jmp f_end
      99				
     100 008F				abs_neg:
     101 008F  F7 D8				neg ax ;
     102 0091  A3 000C R			mov res, ax ;
     103				
     104					
Microsoft (R) Macro Assembler Version 5.10                  11/4/20 13:08:13
                                                             Page     1-3


     105				
     106 0094				f_end:
     107 0094  B4 4C			        mov ah, 4ch
     108 0096  CD 21			        int 21h
     109 0098				Main	ENDP
     110 0098				CODE	ENDS
     111				        END Main
Microsoft (R) Macro Assembler Version 5.10                  11/4/20 13:08:13
                                                             Symbols-1


Segments and Groups:

                N a m e         	Length	 Align	Combine Class

ASTACK . . . . . . . . . . . . .  	0020	PARA	STACK	
CODE . . . . . . . . . . . . . .  	0098	PARA	NONE	
DATA . . . . . . . . . . . . . .  	000E	PARA	NONE	

Symbols:            

                N a m e         	Type	 Value	 Attr

A  . . . . . . . . . . . . . . .  	L WORD	0000	DATA
ABS_NEG  . . . . . . . . . . . .  	L NEAR	008F	CODE

B  . . . . . . . . . . . . . . .  	L WORD	0002	DATA

F1 . . . . . . . . . . . . . . .  	L NEAR	0005	CODE
F1_SECOND  . . . . . . . . . . .  	L NEAR	0024	CODE
F2 . . . . . . . . . . . . . . .  	L NEAR	004A	CODE
F2_SECOND  . . . . . . . . . . .  	L NEAR	0033	CODE
F3 . . . . . . . . . . . . . . .  	L NEAR	005D	CODE
F3_SECOND  . . . . . . . . . . .  	L NEAR	007D	CODE
F_END  . . . . . . . . . . . . .  	L NEAR	0094	CODE

I  . . . . . . . . . . . . . . .  	L WORD	0004	DATA
I1 . . . . . . . . . . . . . . .  	L WORD	0008	DATA
I2 . . . . . . . . . . . . . . .  	L WORD	000A	DATA

K  . . . . . . . . . . . . . . .  	L WORD	0006	DATA

MAIN . . . . . . . . . . . . . .  	F PROC	0000	CODE	Length = 0098
MIN_I2 . . . . . . . . . . . . .  	L NEAR	0076	CODE

RES  . . . . . . . . . . . . . .  	L WORD	000C	DATA

@CPU . . . . . . . . . . . . . .  	TEXT  0101h		
@FILENAME  . . . . . . . . . . .  	TEXT  lb3		
@VERSION . . . . . . . . . . . .  	TEXT  510		


    108 Source  Lines
    108 Total   Lines
     25 Symbols

  47538 + 461769 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
